spring:
  application:
    name: electrozone

  config:
    import: optional:file:.env[.properties]

  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            client-name: google
            authorization-grant-type: authorization_code
            redirect-uri: ${GOOGLE_REDIRECT_URI} # 구글의 리디렉트 URI
            scope: ${GOOGLE_SCOPE}
          kakao:
            client-id: ${KAKAO_CLIENT_ID} # 앱키 -> REST API 키
            client-secret: ${KAKAO_CLIENT_SECRET} # 카카오 로그인 -> 보안 -> Client Secret 코드
            client-authentication-method: client_secret_post
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${KAKAO_REDIRECT_URI} # yml 파일에서 {} 가 spring 특수문자로 인식되게 하기 위해 " " 사용
            scope: ${KAKAO_SCOPE}
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # "인가 코드 받기" 항목
            token-uri: https://kauth.kakao.com/oauth/token # "토큰 받기" 항목
            user-info-uri: https://kapi.kakao.com/v2/user/me # "사용자 정보 가져오기" 항목
            user-name-attribute: id # 식별자 . 카카오의 경우 "id" 사용

jwt:
  issuer: "ELECTROZONE"
  secret_key: ${JWT_SECRET_KEY}

# 로그인 인증 정보 디버깅
#logging:
#  level:
#    org:
#      springframework:
#        security: DEBUG
